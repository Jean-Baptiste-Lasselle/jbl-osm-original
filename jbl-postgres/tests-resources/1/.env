# GIS_RUN_STACK_HOME is the directory containing the './docker-compose.yml' file. It's the run's home.
GIS_RUN_STACK_HOME=/carto/proto/run
# PBF_VAULT_HOME must NEVER be equal, or a sub-directory of the GIS_RUN_STACK_HOME dicrectory :
# In the PBF_VAULT_HOME directory, you will then freely,and independently, batch-like bulk download your geodata from outside sources.
# You will then check integrity and security around those new files, before allowing execution of GIS Run Stack
PBF_VAULT_HOME=/carto/vault
NOM_BDD_GEOLOC=bddgeoloc
RESEAU_DOCKER_DEVOPS_TESTS=tests-devops-postgres

POSTGRESQL_VERSION_ID=9.5.14
#      
# - pourra être remplacé par :
#      
#   +  export POSTGRESQL_VERSION_ID=9.5.14
#   +      
#   +  export POSTGRESQL_BUILD_ID=dlkejfjsdf    =>> donc celui-là il permet de retrouver la version exacte du code source
#   +  
#    

# +++++ 
# +++++  +  BUILD ENV.
# +++++ 
# 
# Might be an IP address, a resolvable (in execution context) domain name: any resolvable _net host_.
# export DOCKER_REGISTRY_NET_HOST_ID=docker.io
DOCKER_REGISTRY_NET_HOST_ID=docker.kytes.io
DISTRIBUTOR_ORGANIZATION=kytes
DISTRIBUTED_PRODUCT_DISTRIBUTION_NAME=postgresql
DISTRIBUTED_PRODUCT_VERSION_ID=0.0.1
UNEDERLYING_CONTAINER_OS_IMAGE=ubuntu
UNEDERLYING_CONTAINER_OS_VERSION=latest
# -->> 
# -->> pour le nom de l'image, je la construirai par concaténation au sein du fichier docker-compose.yml : 
# -->> 
# NOM_IMAGE_DOCKER_TESTEE=$DOCKER_REGISTRY_NET_HOST_ID/$DISTRIBUTOR_ORGANIZATION/$DISTRIBUTED_PRODUCT_DISTRIBUTION_NAME-$POSTGRESQL_VERSION_ID:$DISTRIBUTED_PRODUCT_VERSION_ID
# But here I play with a DIY local image 
# Mais pour ces tests, j'utiliserai uniquement le registry local docker : 
# NOM_IMAGE_DOCKER_TESTEE="$DISTRIBUTOR_ORGANIZATION/$DISTRIBUTED_PRODUCT_DISTRIBUTION_NAME-$POSTGRESQL_VERSION_ID-$UNEDERLYING_CONTAINER_OS_IMAGE"
# NOM_IMAGE_DOCKER_TESTEE="$DISTRIBUTED_PRODUCT_DISTRIBUTION_NAME-$POSTGRESQL_VERSION_ID-$UNEDERLYING_CONTAINER_OS_IMAGE:$DISTRIBUTED_PRODUCT_VERSION_ID"
