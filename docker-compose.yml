version: '3'
services:
  postgis:
    container_name: 'postgis'
    build: 
      context: './postgis'
      args:
        # because it's our custom diretrory, not present ion base postgis image, cf. ./postgis/Dockerfile
        - DOWNLOADED_PBF_FILES_HOME=/downloaded-pbf-files
        - POSTGRES_DB=gis
        - POSTGRES_USER=renderer-user
    volumes:
      - geodata-volume:/var/lib/postgresql/data
      - ./data:/var/lib/postgresql/data
      - ./pbf:/downloaded-pbf-files
    environment:
      - POSTGRES_DB=gis
      # Is there no dad at shinesolutions.com?
      - POSTGRES_USER=renderer-user
      - POSTGRES_PASSWORD=whereischarlie
      - DOWNLOADED_PBF_FILES_HOME=/downloaded-pbf-files
    networks:
      - devops
  renderer:
    container_name: 'rendereurpoulet'
    build: ./renderer
    volumes:
      - ./renderer/map_data:/map_data
      - ./renderer/scripts:/scripts
      - ./renderer/scripts:/shapes
      # instead of deprecated 'volumes_from' directive with read-only option
      - geodata-volume:/var/lib/postgresql/data:ro
#     volumes_from:
#       - postgis:ro
    environment:
      - MAPNIK_POSTGRES_DB=gis
      # Is there no dad at shinesolutions.com?
      - MAPNIK_POSTGRES_USER=renderer-user
      - MAPNIK_POSTGRES_PASSWORD=whereischarlie
    ports:
      - "8080:8080"
      - "9090:9090"
      - "8090:8090"
    expose:
      - 8080/tcp
      - 9090/tcp
      # I saw in docker logs, gopnik/mapnik trying to connect to 127.0.0.1:8090, with connection refused error
      - 8090/tcp
    depends_on:
      - postgis
    networks:
      - devops
  web:
    image: nginx:1.11-alpine
    volumes:
      - ./web:/usr/share/nginx/html
    ports:
      - "8888:80"
    networks:
      - devops

networks:
  devops:
    # name: 'reseau-devops'
    driver: bridge
#     external: true 
#     ipam:
#       config:
#         - subnet: 192.168.160.0/24
#         - gateway: 192.168.160.1
#         # - gateway: 172.16.1.1
# - 
# + NAMED VOLUMES 
# - 
volumes:
     geodata-volume:
